// 引用android api
import Context from "android.content.Context"
import Activity from "android.app.Activity"

// 引用uts环境库
import { getUniActivity } from "io.dcloud.uts.android"

import ScanRequest from "com.alipay.android.phone.scancode.export.ScanRequest"
import MPScan from "com.alipay.android.phone.scancode.export.adapter.MPScan"
import MPScanCallbackAdapter from "com.alipay.android.phone.scancode.export.adapter.MPScanCallbackAdapter"
import MPScanResult from "com.alipay.android.phone.scancode.export.adapter.MPScanResult"
import MPScanStarter from "com.alipay.android.phone.scancode.export.adapter.MPScanStarter"
import MPScanError from "com.alipay.android.phone.scancode.export.adapter.MPScanError"

class MyScanCallback extends MPScanCallbackAdapter {
	params: ScanParams

	constructor(params: ScanParams) {
		super()
		this.params = params
	}

	override onScanFinish(context: Context, mpScanResult: MPScanResult, mpScanStarter: MPScanStarter): boolean {
		let type = mpScanResult.getMPRecognizeType()
		let text = mpScanResult.getText()
		var finish = this.params.onScanFinish?.(type, text)
		console.log('onScanFinish.finish:', finish)
		// 目前尚无法有效获取回调函数的返回值
		// if (finish?.valueOf()) {
		// 	mpScanStarter.restart()
		// 	return false
		// }
		let activity = context as Activity
		activity.finish()
		return true
	}

	override onScanCancel(context: Context): boolean {
		// 识别取消
		this.params.onScanCancel?.()
		return super.onScanCancel(context)
	}

	override onScanError(context: Context, error: MPScanError): boolean {
		// 识别错误
		this.params.onScanError?.(error.getMsg())
		return super.onScanError(context, error)
	}
}

type ScanParams = {
	viewText?: string
	recognizeTypes?: string
	hideAlbum: boolean
	openTorchText?: string
	closeTorchText?: string
	onScanFinish?: (type:string, text:string) => boolean
	onScanCancel?: () => void
	onScanError?: (err:string) => void
}

const recognizeTypeNames = [
	'QR_CODE',
	'BAR_CODE',
	'DM_CODE',
	'PDF417_CODE',
]
const recognizeTypeValues = [
	ScanRequest.RecognizeType.QR_CODE,
	ScanRequest.RecognizeType.BAR_CODE,
	ScanRequest.RecognizeType.DM_CODE,
	ScanRequest.RecognizeType.PDF417_Code,
]

export function startScanFullScreen(params: ScanParams) {
	let scanRequest = new ScanRequest()

	if (params.viewText != null) scanRequest.setViewText(params.viewText)

	if (params.recognizeTypes != null) {
		// 设法得到一个 Array<ScanRequest.RecognizeType> 类型的空数组
		const args = [ScanRequest.RecognizeType.QR_CODE]
		args.pop()
		params.recognizeTypes
			?.replace(/[^0-9a-zA-Z_]/, ',')
			?.split(',')
			?.filter((str:string):boolean => {
				const idx = recognizeTypeNames.indexOf(str)
				if (idx >= 0) {
					args.push(recognizeTypeValues[idx])
				}
				return false
			})

		// 设法调用具有可变参数的原生接口
		switch (args.length) {
		case 1:
			scanRequest.setRecognizeType(args[0])
		case 2:
			scanRequest.setRecognizeType(args[0], args[1])
		case 3:
			scanRequest.setRecognizeType(args[0], args[1], args[2])
		case 4:
			scanRequest.setRecognizeType(args[0], args[1], args[2], args[3])
		}
	}

	if (params.hideAlbum != null) scanRequest.setNotSupportAlbum(params.hideAlbum)

	if (params.openTorchText != null) scanRequest.setOpenTorchText(params.openTorchText)

	if (params.closeTorchText != null) scanRequest.setCloseTorchText(params.closeTorchText)

	let callback = new MyScanCallback(params)
	MPScan.startMPaasScanFullScreenActivity(getUniActivity(), scanRequest, callback)
}

type TestParams = {
	viewText?: string
	recognizeTypes?: string
	hideAlbum: boolean
	openTorchText?: string
	closeTorchText?: string
	onScanFinish?: (type:string, text:string) => boolean
	onScanCancel?: () => void
	onScanError?: (err:string) => void
}

export function doTest(params: TestParams) {
	console.log('doTest:params:', params)
	console.log('doTest:params.viewText', params.viewText)
	console.log('doTest:params.recognizeTypes', params.recognizeTypes)
	console.log('doTest:params.hideAlbum', params.hideAlbum)
	console.log('doTest:params.openTorchText', params.openTorchText)
	console.log('doTest:params.closeTorchText', params.closeTorchText)
	console.log('doTest:params.onScanFinish', params.onScanFinish)
	console.log('doTest:params.onScanCancel', params.onScanCancel)
	console.log('doTest:params.onScanError', params.onScanError)

	if (params.recognizeTypes != null) {
		let types = params.recognizeTypes
			?.replace(/[^A-Z_]/, ',')
			?.split(',')
			?.filter((str:string):boolean => {
				return recognizeTypeNames.indexOf(str) >= 0
			})
			?.map((str:string):ScanRequest.RecognizeType => {
				return recognizeTypeValues[recognizeTypeNames.indexOf(str)]
			})
		console.log('types:', types, types?.length)
	}

	let ret = params.onScanFinish?.('type', 'text')
	console.log('onScanFinish():', ret)
}
